


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab-06",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>more sophisticated methods · return types · parameters · Strings · String methods · JOptionPane</p>",
  "folder" : "book",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "#Objectives",
    "shortTitle": "Lab-06",
    "contentMd" : "#Objectives\r\n\r\nmore sophisticated methods · return types · parameters · Strings · String methods · JOptionPane\r\n \r\n"
    },
  
    {
    "title": "#Abstracting code to a method",
    "shortTitle": "01",
    "contentMd" : "#Abstracting code to a method\r\n\r\nIn this step, you will draw many eyes (the examples 6.1 - 6.3 from your lectures).\r\n\r\n\r\n##Coding the setup() method\r\n\r\nCreate a new Processing sketch in your workspace and call it **Example_6_1**.\r\n\r\nYour display window should be 100x100.  Write the line of code that will ensure all subsequent shapes are drawn with no outline.\r\n\r\n\r\n##Coding the draw() method\r\n\r\nInclude the following code in your sketch:\r\n\r\n~~~\r\nvoid draw()\r\n{\r\n  background(204);\r\n  fill(255);\r\n  ellipse(50,50,60,60);    //outer white circle\r\n  fill(0);\r\n  ellipse(50+10, 50, 30, 30);  //black circle\r\n  fill(255);\r\n  ellipse(50+16, 46, 6, 6);  //small, white circle\r\n}\r\n~~~\r\n\r\nRun your code; a single eye should be drawn.\r\n\r\nSave your work.\r\n\r\n\r\n##Drawing two eyes\r\n\r\nWith your **Example_6_1** sketch open, perform a *Save as...* and enter the name **Example_6_2**.\r\n\r\nNow refactor the code above so that you have a method called **eye**.  This method should:\r\n \r\n- accept two parameters of type int, representing the x and y coordiates of the eye.\r\n- have a void return type.\r\n\r\nCall the eye method twice from the draw method so that your display window is rendered like so:\r\n\r\n![Two eyes](./img/00.png)\r\n\r\nSave your work.\r\n\r\n\r\n##Drawing six eyes\r\n\r\nWith your **Example_6_2** sketch open, perform a *Save as...* and enter the name **Example_6_3**.\r\n\r\nNow refactor the code to call the eye method six times from the draw method so that your display window is rendered like so:\r\n\r\n![Six eyes](./img/01.png)\r\n\r\nSave your work.\r\n\r\n"
    },
  
    {
    "title": "#Overloading methods",
    "shortTitle": "02",
    "contentMd" : "#Overloading methods\r\n\r\nIn this step, you will draw many X's (the processing examples 6.4 - 6.9 from your lectures).\r\n\r\n\r\n##Coding the setup() method\r\n\r\nCreate a new Processing sketch in your workspace and call it **Example_6_4**.\r\n\r\nYour display window should be 100x100 and have a light grey background.  \r\n\r\n\r\n##Coding the drawX() method\r\n\r\nWrite a method called **drawX** that:\r\n\r\n- has a void return type\r\n- has an empty parameter list\r\n- sets the stroke to light grey\r\n- sets the weight of the stroke to 20\r\n- draws two lines that intersect in the shape of an **X**\r\n\r\nCall this method from the setup() method.\r\n\r\nWhen you run your code, it should look like this:\r\n\r\n![A light grey, heavy X](./img/02.png)\r\n\r\nSave your work.\r\n\r\n\r\n##Coding a second drawX() method\r\n\r\nWith your **Example_6_4** sketch open, perform a *Save as...* and enter the name **Example_6_5**.\r\n\r\nTo the existing code, write another method called **drawX** that:\r\n\r\n- has a void return type\r\n- accepts a parameter of type int \r\n- sets the stroke to the parameter\r\n- sets the weight of the stroke to 20\r\n- draws two lines that intersect in the shape of an **X**\r\n\r\nIn the setup() method, comment out the call to the previous draw method.  Now call this method instead, passing the value of 0 as a parameter.\r\n\r\nWhen you run your code, it should look like this:\r\n\r\n![A black, heavy X](./img/03.png)\r\n\r\nSave your work.\r\n\r\n\r\n##Coding a third drawX() method\r\n\r\nWith your **Example_6_5** sketch open, perform a *Save as...* and enter the name **Example_6_6**.\r\n\r\nTo the existing code, write another method called **drawX** that:\r\n\r\n- has a void return type\r\n- accepts two parameters of type int \r\n- sets the stroke to the first parameter\r\n- sets the weight of the stroke to the second parameter\r\n- draws two lines that intersect in the shape of an **X**\r\n\r\nIn the setup() method, comment out the call to the previous draw method.  Now call this method instead, passing the value of 0, 30 as parameters.\r\n\r\nWhen you run your code, it should look like this:\r\n\r\n![A black, really heavy X](./img/04.png)\r\n\r\nSave your work.\r\n\r\n\r\n##Coding a fourth drawX() method\r\n\r\nWith your **Example_6_6** sketch open, perform a *Save as...* and enter the name **Example_6_7**.\r\n\r\nWrite another method called **drawX** that:\r\n\r\n- has a void return type\r\n- accepts five parameters of type int \r\n- sets the stroke to the first parameter\r\n- sets the weight of the stroke to the second parameter\r\n- draws two lines that intersect in the shape of an **X**.  The third parameter represents X, fourth represents Y and the fifth represents the size of the line.\r\n\r\nIn the setup() method, comment out the call to the previous draw method.  Now call this method instead, passing the values:  0, 30, 40, 30, 35) as parameters.\r\n\r\nWhen you run your code, it should look like this:\r\n\r\n![A black, really heavy X](./img/05.png)\r\n\r\nSave your work.\r\n\r\n\r\n##Drawing multiple X's\r\n\r\nWith your **Example_6_7** sketch open, perform a *Save as...* and enter the name **Example_6_8**.\r\n\r\nUsing the most appropriate drawX method, reproduce the following output (you will have three individual method calls):\r\n\r\n![Three different X's](./img/06.png)\r\n\r\nSave your work.\r\n\r\n\r\n##Drawing shadowed X's\r\n\r\nWith your **Example_6_8** sketch open, perform a *Save as...* and enter the name **Example_6_9**.\r\n\r\nUsing the most appropriate drawX method and a for or while loop, reproduce the following output:\r\n\r\n![Shadowed X's](./img/07.png)\r\n\r\nSave your work.\r\n\r\n\r\n##Versioning Software\r\n\r\nFor our drawX project, you will notice that we now have 5 sketches, **Example_6_4** to **Example_6_9**.  This means that we have 5 different versions of the drawX project.  As we incrementally worked on our drawX project and got a new method working, we saved off that work and starting working in a new file.  This is a standard approach in programming and we will focus more on this approach throughout the course.  \r\n\r\n\r\n"
    },
  
    {
    "title": "#Farenheit / Celsius Converter",
    "shortTitle": "03",
    "contentMd" : "#Farenheit / Celsius Converter\r\n\r\nIn this step, you will work on reproducing the code example 6.10 from your lectures.\r\n\r\n\r\n##Writing the coversion method\r\n\r\nCreate a new Processing sketch in your workspace and call it **Example_6_10**.\r\n\r\nWrite a method called **farenheitToCelsius** that takes one float parameter. \r\n\r\nThe return type for this method is **float**.\r\n\r\nThe method returns the result of the conversion:  (farenheit - 32.0) * (5.0/9.0)\r\n\r\n\r\n##Calling the coversion method\r\n\r\nThe **farenheitToCelsius** method should be called from the draw() method.\r\n\r\nThe value retuned from the calculation should be printed to the console.\r\n\r\nTest your code by passing the farenheit value of 451.  The celsius value printed should be:  232.77779  \r\n\r\n"
    },
  
    {
    "title": "#Recursion",
    "shortTitle": "04",
    "contentMd" : "#Recursion\r\n\r\nIn this step, you will work on reproducing the code example 6.11 from your lectures.\r\n\r\n\r\n##Solution with no recursion\r\n\r\nCreate a new Processing sketch in your workspace and call it **Example_6_11**.\r\n\r\nInclude the following code in it:\r\n\r\n~~~\r\nvoid setup()\r\n{\r\n  size(100,100);\r\n  drawLines(10,4);\r\n}\r\n\r\nvoid drawLines(int x, int num)\r\n{\r\n    for (int i = 0; i < num; num--)\r\n    {\r\n        line (x, 20, x, 80);\r\n        x += 5;\r\n    }\r\n} \r\n~~~\r\n\r\nRun the code so you can see the output. \r\n\r\n\r\n##Recap of recursion\r\n\r\nA method can contain a line of code that calls itself.\r\n\r\nThis is called recursion.\r\n\r\nTo stop the infinite calling of the method, it is necessary to have some way for the method to exit.  This is called the base case.  You continually work towards the base case. \r\n\r\n\r\n##Using recursion\r\n\r\nRewrite the **drawLines** method so that it uses recursion to produce the same output as above.\r\n\r\nSave your work.\r\n\r\n"
    },
  
    {
    "title": "#Exercise",
    "shortTitle": "Exercises",
    "contentMd" : "#Exercise\r\n\r\n\r\n##Exercise 1 (String methods)\r\n\r\nCreate a new sketch called **lab06_exercise01**.\r\n\r\nIn this exercise, you will call many different methods over a given String.\r\n\r\nDeclare a String to hold the text **This is my String exercise**.\r\n\r\nProduce the following console output over the String:\r\n\r\n![String details](./img/08.png)\r\n\r\nSave your work.\r\n\r\n"
    },
  
    {
    "title": "#Challenges",
    "shortTitle": "Challenges",
    "contentMd" : "#Challenges\r\n\r\nFor each challenge listed below, open a new sketch.\r\n\r\nIn these challenges, we are going to use something you haven't seen before..Message Dialogs.  \r\n\r\n![Message Dialog](./img/09.png)\r\n\r\nWe will these Dialog boxes to ask the user to type in information.  We will also use them to display information. \r\n\r\nAs we will cover the theory on them later in the course, we will give you the starting code here.  Don't worry if you don't understand all of the code relating to these dialogs, or if you can't do these exercises...we will cover it later!\r\n\r\n\r\n##Challenge 1 (Using Message Dialogs)\r\n\r\nCut and paste the following code into a new sketchbook.\r\n\r\n~~~java\r\nimport javax.swing.*;\r\n\r\nvoid setup()\r\n{\r\n  String str = JOptionPane.showInputDialog(\"Enter a String of your choice:\");\r\n  JOptionPane.showMessageDialog(null, \"The String you entered is: \" + str);\r\n  exit();  //supresses the display window.\r\n}\r\n~~~\r\n\r\nRun the code.  When the Dialog appears, enter any String of your choice.  Is it re-displayed back to you?\r\n\r\nSave your work.\r\n\r\n\r\n##Challenge 2 (Using Message Dialogs)\r\n\r\nTaking the code from the above challenge as starter code, make the necessary changes to display the length of the entered string as well as the entered string.\r\n\r\nRun the code.  When the Dialog appears, enter any String of your choice.  Is it re-displayed back to you, along with the length of the String?\r\n\r\nSave your work.\r\n\r\n\r\n##Challenge 3 (Using Message Dialogs)\r\n\r\nUsing the code from the above challenge, make the necessary changes to display:\r\n\r\n- the entered String.\r\n- the length of the entered string.\r\n- the string convered to uppercase.\r\n- the string converted to lowercase.\r\n\r\nRun the code.  When the Dialog appears, enter any String of your choice.  Is the right information displayed in the JOption pane?  However, does it look very cluttered like this?  We will fix the layout in our next challenge.\r\n\r\n![String details](./img/09.png)\r\n\r\nSave your work.\r\n\r\n\r\n##Challenge 4 (Formatting Message Dialogs)\r\n\r\nEscape sequences are used to format Strings in Java:\r\n\r\n![Escape sequences](./img/10.png)\r\n\r\nResearch the use of escape characters in Java.  \r\n\r\nUsing the newline escape sequence, format the code from the above challenge so that your Message Dialog looks like this:\r\n\r\n![Formatted Message Dialog](./img/11.png)\r\n\r\nSave your work.\r\n\r\n"
    },
  
    {
    "title": "#Solutions",
    "shortTitle": "Solutions",
    "contentMd" : "#Solutions\r\n\r\nThe solutions for this lab can be found [here](archives/lab06_solutions.zip). \r\n\r\nIf you require unzipping software, 7zip is a good choice: <http://www.7-zip.org/> (or Keka for Mac <http://www.kekaosx.com/en/>)\r\n\r\nAfter unzipping the solutions, it might be a good idea to copy the folders to your **sketchbook** folder.  From Processing, you could then use **File**, followed by **Sketchbook** to easily open them.\r\n"
    }
  
  ]
  }

