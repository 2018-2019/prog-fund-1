


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab-11a",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>Game of Pong Architecture · Solutions for all versions · PongGame V1.0 · PongGameV2.0</p>",
  "folder" : "book-v1-v2",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "#Objectives",
    "shortTitle": "Lab-11a",
    "contentMd" : "#Objectives\r\n\r\nGame of Pong Architecture · Solutions for all versions · PongGame V1.0 · PongGameV2.0\r\n"
    },
  
    {
    "title": "#The Game of Pong",
    "shortTitle": "Pong",
    "contentMd" : "#The Game of Pong\r\n\r\nIn this section, we wil introduce the Game of Pong that we will build over the next few labs.\r\n    \r\n\r\n##Tournament\r\n\r\nIn our version of Pong, the player enters into a tournament of games. \r\n\r\nThe player decides how many games of Pong they would like to play in their tournament:\r\n\r\n![Number of Games in Tournament](./img/01.png)\r\n\r\n\r\n##Player name\r\n\r\nThe player enters their name (if more than 6 characters are entered, Pong will truncate the String):\r\n\r\n![Name of Player](./img/02.png)\r\n\r\n\r\n##Playing the Game\r\n\r\nWhen the ball is hit by the paddle, the score is increased by 1.\r\n\r\nWhen the paddle misses the ball, a life is lost.\r\n\r\nThere are three lives in a game.\r\n\r\n![Playing Pong](./img/03.png)\r\n\r\nWhen a game ends and there are more games left to play in the tournament:\r\n\r\n- The score is displayed.\r\n\r\n- The player is asked if they want to continue with the tournament.\r\n\r\n![Continue with Tournament?](./img/04.png)\r\n\r\nIf the player wishes to continue:\r\n\r\n- Their game score is stored in an array. \r\n\r\n- A new game is started (the variables storing the number of lives and score is reset to zero).\r\n\r\n![Playing Pong](./img/03.png)\r\n\r\nPlayer is shown their score and asked again if they wish to continue.\r\n\r\n![Continue with Tournament?](./img/05.png)\r\n\r\nIf they choose yes:\r\n\r\n- Their score is stored in an array. \r\n\r\n- A new game is started.\r\n\r\n\r\n##Ending the Game\r\n\r\nWhen a game ends and there are NO more games left to play in the tournament:\r\n\r\n- The player name and score is displayed for each game in the tournament.\r\n\r\n- The tournament statistics are also displayed (highest score, lowest score and average score).\r\n\r\n![Tournament Over](./img/06.png)\r\n\r\n"
    },
  
    {
    "title": "#Architecture of Pong",
    "shortTitle": "Architecture",
    "contentMd" : "#Architecture of Pong\r\n\r\nIn the final version (V8.0) of Pong, there are four classes:\r\n\r\n- **PongGame** - has the setup() and draw() methods.  It starts the game, handles player input, manages collision detection between the Ball and the Paddle, ends the game and outputs the player statistics.\r\n    \r\n- **Ball** - controls the location, size and speed of the ball.  This class updates the ball and displays it at the updated location.\r\n\r\n- **Paddle** - controls the location and size of the paddle.  This class updates the paddle location and displays it at the updated location. \r\n    \r\n- **Player** - stores the player name and the score for each game in the tournament (in an array).  It calculates the statistics for the games in the tournament. \r\n\r\n![PongGame V8.0](./img/07.png)\r\n\r\n\r\n##Versions of Pong\r\n\r\nWe will incrementally build versions of the game and finish with Game of Pong V8.0.  \r\n\r\nThe 8 versions are:\r\n\r\n- Game of Pong V1.0 (Ball class)\r\n\r\n- Game of Pong V2.0 (Paddle class)\r\n\r\n- Game of Pong V3.0 (Simple collision detection)\r\n\r\n- Game of Pong V4.0 (Lives lost, lives per game, score)\r\n\r\n- Game of Pong V5.0 (Tournament functionality)\r\n\r\n- Game of Pong V6.0 (Player class – array, no statistics)\r\n\r\n- Game of Pong V7.0 (Player class – array, with statistics)\r\n\r\n- Game of Pong V8.0 (JOptionPane for I/O)\r\n\r\nThere is an additional version that covers more advance collision using pythagorus theorem:\r\n\r\n- Game of Pong V9.0 (Advanced collision detection)\r\n\r\nThe solutions for each of these versions can be downloaded from [here](archives/game-of-pong-v1-to-v9.zip). \r\n\r\n\r\n"
    },
  
    {
    "title": "#PongGameV1.0",
    "shortTitle": "V1",
    "contentMd" : "#PongGameV1.0\r\n\r\nHaving read the lecture on PongGameV1.0 we will now develop it. \r\n\r\nMake sure that you read and understand the code below, while typing it into the Ball class.  If you have any questions on any part of the code, make sure to ask your lecturer.\r\n\r\n![PongGame V1.0](./img/08.png)\r\n\r\n\r\n##Ball class\r\n\r\nCreate a new Processing sketch called ''PongGameV1_0''.\r\n\r\nCreate a new tab and call it ''Ball''.\r\n\r\nIn the Ball class, add the instance fields:\r\n\r\n~~~java\r\npublic class Ball \r\n{\r\n  private float xCoord;      //x coordinate of the ball\r\n  private float yCoord;      //y coordinate of the ball\r\n  private float diameter;    //diameter of the ball\r\n  private float speedX;      //speed along the x-axis\r\n  private float speedY;      //speed along the y-axis\r\n}\r\n~~~\r\n\r\nThen add these getter methods:\r\n\r\n~~~java\r\n   public float getXCoord(){  \r\n      return xCoord;\r\n   }  \r\n\r\n   public float getYCoord(){\r\n      return yCoord;\r\n   }  \r\n\r\n   public float getDiameter(){\r\n      return diameter;\r\n   }  \r\n~~~\r\n\r\nFollowed by the setDiameter setter:\r\n\r\n~~~java\r\n  public void setDiameter(float diameter){\r\n     //The ball diameter must be between 20 and height/6 (inclusive)\r\n     if ((diameter >= 20) && (diameter <= height/6)){\r\n        this.diameter = diameter;\r\n     }\r\n     else {\r\n        // If an invalid diameter is passed as a parameter, a default of 20 is imposed.\r\n        // With this animation, if we do not supply a default value for the diameter, \r\n        // a ball may not be drawn on the display window.  Important note: it is not       \r\n        // always appropriate to provide a default value at sette) level; this will \r\n        //depend on your design.\r\n        this.diameter = 20;\r\n     }\r\n  }\r\n~~~\r\n\r\nNow add this method that will display a white ball with no outline on the display window:\r\n\r\n~~~java\r\n  public void display(){\r\n     fill(255);\r\n     noStroke();\r\n     ellipse(xCoord, yCoord, diameter, diameter);\r\n  }  \r\n~~~\r\n\r\nNow add the resetBall private helper method:\r\n\r\n~~~java\r\n  private void resetBall(){\r\n     xCoord = 0;\r\n     yCoord = random(height);\r\n     speedX = random(3, 5);   \r\n     speedY = random(-2, 2);\r\n  }\r\n~~~\r\n\r\nNOTE:  A private helper method is a method that is private to the class you are in i.e. you are not allowed to use it outside of the current class.  The resetBall method is used by the Ball constructor and the update method.\r\n\r\nStill in the ball class, add this constructor:\r\n\r\n~~~java\r\n  public Ball(float diameter){\r\n      setDiameter(diameter);\r\n      resetBall();\r\n  }\r\n~~~\r\n\r\nAdd a hit method that will change the ball direction when it hits the paddle and bump it back to the edge of the paddle.\r\n\r\n~~~java\r\n  public void hit(){\r\n      speedX = speedX * -1;\r\n      xCoord = xCoord + speedX;\r\n  }\r\n~~~\r\n\r\nFinally add the following update method:\r\n\r\n~~~java\r\n  public boolean update(){\r\n    boolean lifeLost = false;\r\n\r\n    //update ball coordinates\r\n    xCoord = xCoord + speedX;\r\n    yCoord = yCoord + speedY;\r\n       \r\n    //reset position if ball leaves the screen\r\n    if (xCoord > width + diameter/2){\r\n       resetBall();\r\n       lifeLost = true;\r\n    }\r\n\r\n    // If ball hits the left edge of the display \r\n    // window, change direction of xCoord\r\n    if (xCoord < diameter/2){\r\n       xCoord = diameter/2;\r\n       speedX = speedX * -1;\r\n    }\r\n       \r\n    // If ball hits top or bottom of the display\r\n    //  window, change direction of yCoord\r\n    if (yCoord > height - diameter/2){\r\n       yCoord = height - diameter/2;\r\n       speedY = speedY * -1;\r\n    } \r\n    else if (yCoord < diameter/2){\r\n       yCoord = diameter/2;\r\n       speedY = speedY * -1;\r\n    }\r\n    return lifeLost;\r\n } \r\n~~~\r\n\r\nYour ball class is complete.  Save this code.\r\n\r\n\r\n##PongGameV1_0 class\r\n\r\nNow that the Ball class is written, we will start to use it in the **PongGameV1_0** main tab.\r\n\r\nReturn to the main tab and enter the following code:\r\n\r\n~~~java\r\nBall ball;\r\n\r\nvoid setup(){\r\n   size(600,600);\r\n   noCursor();\r\n\r\n   //setting up the ball with hard-coded sizes.\r\n   ball = new Ball(20.0);\r\n}\r\n\r\nvoid draw(){\r\n   background(0);    \r\n   \r\n   //Update the ball position and display it.\r\n   ball.update();\r\n   ball.display();       \r\n}\r\n~~~\r\n\r\n\r\n##Test your code\r\n\r\nRun your code.  \r\n\r\nYou should now have a ball that traverses the screen left to right.\r\n\r\nWhen the ball reaches the right hand side, it should disappear off screen and a new ball should appear in a random lcoation on the left hand side.  \r\n\r\nWhen a new ball appears, it should traverse the screen in a random trajectory at a random speed.\r\n\r\nMake sure you understand the code before moving onto PongGameV2_0.\r\n\r\n\r\n##Solution\r\n\r\nIf your code is not working, the solution can be found [here](archives/PongGameV1_0.zip).\r\n\r\n"
    },
  
    {
    "title": "#PongGameV2.0",
    "shortTitle": "V2",
    "contentMd" : "#PongGameV2.0\r\n\r\nHaving read the lecture on PongGameV2.0 we will now develop it. \r\n\r\nMake sure that you read and understand the code below, while typing it into the Paddle class.  If you have any questions on any part of the code, make sure to ask your lecturer.\r\n\r\n![PongGame V2.0](./img/09.png)\r\n\r\n\r\n##Paddle class\r\n\r\nOpen your solution to ''PongGameV1_0''.\r\n\r\nSave it as ''PongGameV2_0''\r\n\r\nCreate a new tab and call it ''Paddle''.\r\n\r\nIn the Paddle class, add the instance fields:\r\n\r\n~~~java\r\npublic class Paddle \r\n{\r\n   private int xCoord;        // X coordinate of the paddle\r\n   private int yCoord;        // Y coordinate of the paddle\r\n   private int paddleWidth;   // width of the paddle \r\n   private int paddleHeight;  // height of the paddle\r\n}\r\n~~~\r\n\r\nThen add these getter methods:\r\n\r\n~~~java\r\n   public int getXCoord(){\r\n      return xCoord;\r\n   }\r\n\r\n   public int getYCoord(){\r\n      return yCoord;\r\n   }\r\n\r\n   public int getPaddleWidth(){\r\n      return paddleWidth;\r\n   }\r\n\r\n   public int getPaddleHeight(){\r\n      return paddleHeight;\r\n   }\r\n~~~\r\n\r\nFollowed by the setPaddleWidth setter:\r\n\r\n~~~java\r\n  public void setPaddleWidth(int paddleWidth){\r\n     //The paddle width must be between 10 and \r\n     //width/2 (inclusive)\r\n     if ((paddleWidth >= 20) && (paddleWidth <= width/2)){\r\n         this.paddleWidth = paddleWidth;\r\n     }\r\n     else{\r\n     // If an invalid width is passed as a parameter, a default\r\n     // width of 20 is imposed.  With this animation, if we do \r\n     // not supply a default value for the width, a paddle \r\n     //may not be drawn on the display window.  Important \r\n     // note: it is not always appropriate to provide a default \r\n     // value at setter level; this will depend on your \r\n     //design.\r\n         this.paddleWidth = 20;\r\n     }\r\n  } \r\n~~~\r\n\r\nFollowed by the setPaddleHeight setter:\r\n\r\n~~~java\r\n  public void setPaddleHeight(int paddleHeight){\r\n     //The paddle height must be between 50 \r\n     //and height/2 (inclusive)\r\n     if ((paddleHeight >= 50) && (paddleHeight <= height/2)){\r\n         this.paddleHeight = paddleHeight;\r\n     }\r\n     else{\r\n     // If an invalid height is passed as a parameter, a default \r\n     // height of 50 is imposed.  With this animation, if we do \r\n     // not supply a default value for the height, a paddle \r\n     // may not be drawn on the display window.  Important \r\n     // note: it is not always appropriate to provide a default \r\n     // value at setter level; this will depend on your design.\r\n         this.paddleHeight = 50;\r\n     }\r\n  }\r\n~~~\r\n\r\nNow add this constructor:\r\n\r\n~~~java\r\n  public Paddle(int paddleWidth, int paddleHeight)\r\n  {\r\n     setPaddleWidth(paddleWidth);\r\n     setPaddleHeight(paddleHeight);\r\n     \r\n     // the xCoordinate variable is set here and it stays \r\n     // this value for duration of the program.\r\n     xCoord = width - this.paddleWidth;\r\n     \r\n     // the yCoordinate variable is set here and changes \r\n     // later in the program as the mouse moves on the \r\n     // vertical plane.\r\n     yCoord = height/2;\r\n  }\r\n~~~\r\n\r\nAdd this method that will display a gray paddle with no outline on the display window:\r\n\r\n~~~java\r\n  public void display(){\r\n     fill(102);\r\n     noStroke();\r\n     rect(xCoord, yCoord, paddleWidth, paddleHeight);\r\n  }    \r\n~~~\r\n\r\nFinally add the following update method:\r\n\r\n~~~java\r\n  public void update()\r\n  {\r\n     yCoord = mouseY - paddleHeight/2;\r\n    \r\n     //Reset yCoord if it’s outside the window coordinates. \r\n     if (yCoord < 0){\r\n         yCoord = 0; \r\n     }\r\n     if (yCoord > (height - paddleHeight)){\r\n         yCoord = height - paddleHeight;\r\n     }\r\n  } \r\n~~~\r\n\r\nYour Paddle class is complete.  Save this code.\r\n\r\n\r\n##PongGameV2_0 class\r\n\r\nThe code from your PongGameV1_0 class should be in your PongGameV2_0 class/main tab.\r\n\r\nThe following methods currently perform this processing:\r\n\r\n- setup() sets up the size of the window, switches off the cursor and creates a new Ball object\r\n\r\n- draw() repeatedly updates the ball location on the screen (based on speedX and speedY) and redisplays it.\r\n\r\nUpdate this code so that a Paddle object is created in the setup() method.  To the Paddle constructor, pass in 20 as the width and 100 as the height.  Also update the draw() method to include this code:\r\n\r\n~~~java\r\n   paddle.update();     //Update the paddle location in line with the cursor\r\n   paddle.display();    //Draw the paddle in this new location \r\n~~~\r\n\r\n\r\n##Test your code\r\n\r\nRun your code.  \r\n\r\nThe ball functionality should not have been affected.  It still should:\r\n\r\n- traverse the screen left to right.\r\n\r\n- when it reaches the right hand side, disappear off screen and a new ball should appear in a random lcoation on the left hand side.  \r\n\r\n- when re-appearing, traverse the screen in a random trajectory at a random speed.\r\n\r\n\r\nA paddle should also now appear.  It should be pinned to the right hand side of the window and should move on it's vertical plane in accordance with the movement of the mouse pointer.\r\n\r\nAs there is no collision detection built into the code, the paddle and ball ignore each other.\r\n\r\nMake sure you understand the code before moving onto PongGameV3_0.\r\n\r\n\r\n##Solution\r\n\r\nIf your code is not working, the solution can be found [here](archives/PongGameV2_0.zip). \r\n\r\n"
    }
  
  ]
  }

