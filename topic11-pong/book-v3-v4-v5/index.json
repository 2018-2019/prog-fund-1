


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab-11b",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>PongGame V3.0 路 PongGame V4.0 路 PongGameV5.0</p>",
  "folder" : "book-v3-v4-v5",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "#Objectives",
    "shortTitle": "Lab-11b",
    "contentMd" : "#Objectives\r\n\r\nPongGame V3.0 路 PongGame V4.0 路 PongGameV5.0\r\n"
    },
  
    {
    "title": "#PongGameV3.0",
    "shortTitle": "V3",
    "contentMd" : "#PongGameV3.0\r\n\r\nOn completion of this lab you should be very familiar with the game of pong and have included collision detection code for the Ball and Paddle class.  You should see the game evolve through maintaining tournaments, lives lost and scores for the game.  In this lab, you will work on PongGameV3.0, PongGameV4.0 and PongGameV5.0.\r\n\r\nHaving read the lecture on PongGameV3.0 we will now develop it. \r\n\r\nThis version of the game adds collision detection between the Ball and the Paddle.\r\n\r\n![PongGame V3.0](./img/01.png)\r\n\r\n\r\n##Adding hitPaddle method\r\n\r\nOpen your solution to ''PongGameV2_0''.  A copy of the V2 solution is [here](archives/PongGameV2_0.zip), if you need it.\r\n\r\nSave it as ''PongGameV3_0''\r\n\r\nIn the PongGameV3_0 class/main tab, add the following hitPaddle method:\r\n\r\n~~~java\r\n//method returns true if the ball and paddle overlap (i.e. ball is hit), false otherwise.\r\nboolean hitPaddle(Paddle paddle, Ball ball)\r\n{\r\n   //These variables measure the magnitude of the gap between the paddle and the ball.  \r\n   float circleDistanceX = abs(ball.getXCoord() - paddle.getXCoord());\r\n   float circleDistanceY = abs(ball.getYCoord() - paddle.getYCoord() - paddle.getPaddleHeight()/2);\r\n   \r\n   //The Ball is too far away from the Paddle on the X axis to have a collision, so abandon collision detection\r\n   if (circleDistanceX > (ball.getDiameter()/2)) {\r\n      return false;\r\n   }\r\n   \r\n   //The Ball is too far away from the Paddle on the Y axis to have a collision, so abandon collision detection\r\n   if (circleDistanceY > (paddle.getPaddleHeight()/2 + ball.getDiameter()/2)) {\r\n       return false; \r\n   }\r\n   \r\n   //We have a collision!\r\n   return true;\r\n   \r\n}\r\n~~~\r\n\r\n\r\n##Using the hitPadde method\r\n\r\nIn the draw method, after the ball.display() method call, insert the following code:\r\n\r\n~~~java\r\n   //Set variable to true if ball and paddle are overlapping, false if not \r\n   \r\n   boolean collision = hitPaddle(paddle, ball);\r\n   if (collision == true){\r\n      ball.hit();        //the ball is hit i.e. reverses direction.\r\n   }     \r\n~~~\r\n\r\n\r\n##Test your code\r\n\r\nRun your code.  \r\n\r\nThe ball functionality should not have been affected.  It still should:\r\n\r\n- traverse the screen left to right.\r\n\r\n- when it reaches the right hand side, disappear off screen and a new ball should appear in a random lcoation on the left hand side.  \r\n\r\n- when re-appearing, traverse the screen in a random trajectory at a random speed.\r\n\r\n\r\nThe paddle functionality should not have been affected.  It should still:\r\n\r\n- be pinned to the right hand side of the window \r\n\r\n- move on it's vertical plane in accordance with the movement of the mouse pointer.\r\n\r\n\r\nYou should now have collision detection built into the code.  Test that the paddle now hits the ball when they touch.\r\n\r\n\r\n##Solution\r\n\r\nIf your code is not working, the solution can be found [here](archives/PongGameV3_0.zip). \r\n\r\n"
    },
  
    {
    "title": "#PongGameV4.0",
    "shortTitle": "V4",
    "contentMd" : "#PongGameV4.0\r\n\r\nHaving read the lecture on PongGameV4.0 we will now develop it. \r\n\r\nMake sure that you read and understand the code below, while typing it into the relevant class.  If you have any questions on any part of the code, make sure to ask your lecturer.\r\n\r\n![PongGame V4.0](./img/02.png)\r\n\r\n\r\n##Adding game information\r\n\r\nIn this version, we want to store the game information such as the number of lives lost, the maximum lives allowed per game and the score of the game.  The game will end when the user loses the number of lives allowed per game.\r\n\r\nOpen your solution to ''PongGameV3_0''.\r\n\r\nSave it as ''PongGameV4_0''\r\n\r\nIn the PongGameV4_0 class, add the following global variables to store the game information:\r\n\r\n~~~java\r\n  //Current game data\r\n  int livesLost = 0;         //keeps track of number of lives lost in current game\r\n  int score = 0;             //high score of the current game\r\n  int maxLivesPerGame = 3;   //maximum number of lives that can be lost \r\n                             //before the game ends\r\n~~~\r\n\r\nIn the draw() method, change the call to the ball.update() method to be:\r\n\r\n~~~java\r\n  // Update the ball position.  If true is returned, the ball has left the display   \r\n  // window i.e. a life is lost\r\n  if (ball.update() == true){\r\n      livesLost++;\r\n      println(\"Lives lost:  \"  + livesLost);\r\n  }\r\n~~~\r\n\r\nIn the draw() method, replace this version 3.0 code:\r\n\r\n~~~java\r\n   //VERSION 3.0 code.\r\n   //Draw the ball at its new location and check for a collision with the paddle\r\n   ball.display();    \r\n   //Set variable to true if ball and paddle are overlapping, false if not \r\n   boolean collision = hitPaddle(paddle, ball);\r\n   if (collision == true){\r\n      ball.hit();        //the ball is hit i.e. reverses direction.\r\n   }\r\n~~~\r\n\r\nwith the version 4.0 code:\r\n\r\n~~~java\r\n  //If the player still has a life left in the current game, \r\n  //draw the ball at its new location and check for a collision with the paddle\r\n  if (livesLost < maxLivesPerGame){ \r\n     ball.display();       \r\n     //Set variable to true if ball and paddle are overlapping, false if not \r\n     boolean collision = hitPaddle(paddle, ball);\r\n     if (collision == true){\r\n        ball.hit();     //the ball is hit i.e. reverses direction.\r\n        score++;      //increase score in the current game by 1, if the player hit the ball.\r\n        println(\"Score:  \"  + score);\r\n     }\r\n  }\r\n  //The player has no lives left so the game ends\r\n  else{\r\n     println(\"Game Over!\");\r\n     println(\"You have lost all of your lives:  \"  + livesLost);\r\n     println(\"Your final score is:  \"  + score); \r\n     exit();     \r\n  }\r\n~~~\r\n\r\n\r\n##Test your code\r\n\r\nRun your code.  \r\n\r\nYour output should be similar to this:\r\n\r\n![PongGame V4.0 output](./img/03.png)\r\n\r\nMake sure you understand the code before moving onto PongGameV5_0.\r\n\r\n\r\n##Solution\r\n\r\nIf your code is not working, the solution can be found [here](archives/PongGameV4_0.zip). \r\n\r\n"
    },
  
    {
    "title": "#PongGameV5.0",
    "shortTitle": "V5",
    "contentMd" : "#PongGameV5.0\r\n\r\nHaving read the lecture on PongGameV5.0 we will now develop it. \r\n\r\nMake sure that you read and understand the code below, while typing it into the relevant class.  If you have any questions on any part of the code, make sure to ask your lecturer.\r\n\r\n![PongGame V5.0](./img/04.png)\r\n\r\n\r\n##Adding tournament information\r\n\r\nIn this version, we want to store the tournament information such as the number of games in a tournament and the number of games played so far in the tournament.\r\n\r\nOpen your solution to ''PongGameV4_0''.\r\n\r\nSave it as ''PongGameV5_0''\r\n\r\nIn the PongGameV5_0 class, add the following global variables to store the tournament information:\r\n\r\n~~~java\r\n  //Tournament data\r\n  int maxNumberOfGames = 5;     //maximum number of games in a tournament\r\n  int numberOfGamesPlayed = 0;  //num of games played, so far, in a tournament\r\n~~~\r\n\r\nIn the draw() method, replace the ''else'' portion relating to this if statement:\r\n\r\n~~~java\r\n  if (livesLost < maxLivesPerGame){ \r\n~~~\r\n\r\nwith this code:\r\n\r\n~~~java\r\n  //The player has no lives left so the game ends\r\n  else{\r\n     numberOfGamesPlayed++;        \r\n     //If the player has more games left in the tournament, \r\n     //display their score and ask them if they want to continue with tournament.\r\n     if (numberOfGamesPlayed < maxNumberOfGames){\r\n        resetGame();\r\n     }\r\n     else{\r\n        //the player has no more games left in the tournament \r\n        tournamentOver();\r\n     }\r\n  }\r\n~~~\r\n\r\n\r\n##The resetGame() method\r\n\r\nIn the PongGameV5_0 class, add this new method:\r\n\r\n~~~java\r\n// This method prepares for the next game by resetting the variables \r\n// that store the current game information.\r\nvoid resetGame()\r\n{\r\n    println(\"Game Over!\");\r\n    println(\"Starting a new game...\");\r\n    livesLost = 0;        //resets the lives lost in the current game to zero\r\n    score = 0;            //resets the score of the current game to zero   \r\n}\r\n~~~\r\n\r\n\r\n##The tournamentOver() method\r\n\r\nIn the PongGameV5_0 class, add this new method:\r\n\r\n~~~java\r\n// This method displays the player information, before exiting the program.\r\nvoid tournamentOver()\r\n{\r\n   println(\"Game Over!\");\r\n   println(\"Tournament Over!\");\r\n   exit();  \r\n}\r\n~~~\r\n\r\n\r\n##Test your code\r\n\r\nRun your code.  \r\n\r\nYour output should be similar to this:\r\n\r\n![PongGame V5.0 output](./img/05.png)\r\n\r\nMake sure you understand the code before moving onto PongGameV6_0.\r\n\r\n\r\n##Solution\r\n\r\nIf your code is not working, the solution can be found [here](archives/PongGameV5_0.zip). \r\n\r\n"
    }
  
  ]
  }

