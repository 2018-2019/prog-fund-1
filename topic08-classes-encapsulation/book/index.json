


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab-08",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>classes · methods · behaviour · overloading · validation · this · encapsulation · access modifiers · accessors · mutators</p>",
  "folder" : "book",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "#Objectives",
    "shortTitle": "Lab-08",
    "contentMd" : "#Objectives\r\n\r\nclasses · methods · behaviour · overloading · validation · this · encapsulation · access modifiers · accessors · mutators \r\n"
    },
  
    {
    "title": "#Adding behaviour (methods) to Spot",
    "shortTitle": "01",
    "contentMd" : "#Adding behaviour (methods) to Spot\r\n\r\nWe have seen how the fields are used in classes (i.e. xCoord, yCoord, diameter).\r\nWe now look at the behaviour (methods) in classes.    \r\n\r\n**Note:**  The version of Spot below doesn't enforce the encapsulation rules yet.  We will implement these rules in SpotV7.0 (consistent with how we did it in lectures).  We will bring in Encapsulation in Step04 of this lab when we add the accessors and mutators.\r\n\r\n\r\n##Spot V4.0 - display() method\r\n\r\nCreate a new Processing sketch in your workspace and call it **Spot_Version4_0**.\r\n\r\nCreate a new **Spot** tab and cut and paste the following code into it:\r\n\r\n~~~java\r\nclass Spot{\r\n  float xCoord, yCoord;\r\n  float diameter;\r\n  \r\n  Spot()\r\n  {\r\n  }\r\n  \r\n Spot(float xPos, float yPos, float diamtr)\r\n {\r\n    xCoord = xPos;\r\n    yCoord = yPos;\r\n    diameter = diamtr;\r\n  }\r\n  \r\n}\r\n~~~              \r\n\r\nThen write this new method into the above class:\r\n\r\n~~~java\r\n  void display()\r\n  {\r\n    ellipse(xCoord, yCoord, diameter, diameter);\r\n  }\r\n~~~\r\n\r\nIn the *main* tab, cut and paste the following code into it:\r\n\r\n~~~ \r\nSpot sp;\r\n\r\nvoid setup()\r\n{\r\n  size (100,100);\r\n  noStroke();\r\n  sp = new Spot(33, 50, 30);\r\n}\r\n\r\nvoid draw()\r\n{\r\n  background(0);\r\n  sp.display();\r\n}\r\n~~~          \r\n\r\nRun your code.  You should get the following output:\r\n\r\n![Drawing spot using display method](./img/01.png)\r\n\r\nSave your work (don't close the project though).\r\n\r\n"
    },
  
    {
    "title": "#Adding behaviour (methods) to Spot",
    "shortTitle": "02",
    "contentMd" : "#Adding behaviour (methods) to Spot\r\n\r\nWe will continue looking at the behaviour (methods) in classes.    \r\n\r\n**Note:**  The version of Spot below doesn't enforce the encapsulation rules yet.  We will implement these rules in SpotV7.0 (consistent with how we did it in lectures).  We will bring in Encapsulation in Step04 of this lab when we add the accessors and mutators.\r\n\r\n\r\n##Spot V5.0 - colour() method\r\n\r\nSave your **Spot_Version4_0** as **Spot_Version5_0**.\r\n\r\nAdd the following fields to the Spot class \r\n\r\n~~~java\r\n  int red, green, blue, gray;\r\n~~~\r\n\r\nType in the following colour() method code to the Spot class:\r\n\r\n~~~java \r\nvoid colour(int redVal, int greenVal, int blueVal)\r\n  {\r\n    red = redVal;\r\n    green = greenVal;\r\n    blue = blueVal;\r\n    fill (red, green, blue);\r\n  }\r\n~~~\r\n\r\nand then in the *main* tab, refactor the draw() method to: \r\n\r\n~~~java \r\nvoid draw()\r\n{\r\n  background(0);\r\n  sp.colour(255,10,20);\r\n  sp.display();\r\n}\r\n~~~   \r\n\r\nRun the code.  \r\n\r\nYour output should now look like:\r\n\r\n![Drawing spot with display() and colour() methods](./img/02.png)\r\n\r\nSave your work (don't close the project though).\r\n\r\n\r\n##Spot V5.1 - Adding a second (overloaded) colour() method\r\n\r\nSave your **Spot_Version5_0** work as **Spot_Version5_1**.\r\n\r\nType the following extra method code in your Spot class:\r\n\r\n~~~java\r\n void colour(int grayVal)\r\n  {\r\n    gray = grayVal;\r\n    fill (gray);\r\n  }\r\n~~~ \r\n\r\nNow we want to call this extra method, so you need to change the draw method in the *main* tab:\r\n\r\n~~~java\r\nvoid draw()\r\n{\r\n  background(0);\r\n  sp.colour(125);\r\n  sp.display();\r\n}\r\n~~~\r\n\r\nRun the code.  \r\n\r\nYour output should now look like:\r\n\r\n![Drawing spot with second colour method](./img/03.png)\r\n\r\nCan you explain why the output is different from the previous output. \r\n\r\nSave your work (don't close the project though).\r\n\r\n\r\n##Spot V5.2 - Adding another constructor (to introduce a grayscale starting colour)\r\n\r\nSave your **Spot_Version5_1** work as **Spot_Version5_2**.\r\n\r\nType in the following extra method code in your Spot class:\r\n\r\n~~~java\r\n Spot(float xPos, float yPos, float diamtr, int grayVal)\r\n   {\r\n     xCoord = xPos;\r\n     yCoord = yPos;\r\n     diameter = diamtr;\r\n     colour(grayVal);  \r\n   }\r\n~~~\r\n\r\nThis constructor allows us to define the colour (in grayscale) of the spot when creating the object. \r\n\r\nNow we want to call this extra constructor, so you need to change the code in the setup method in the *main* tab:\r\n\r\n~~~java\r\nSpot sp;\r\n\r\nvoid setup()\r\n{\r\n  size (100,100);\r\n  noStroke();\r\n  sp = new Spot(33, 50, 30, 125);\r\n}\r\n\r\nvoid draw()\r\n{\r\n  background(0);\r\n  sp.display();\r\n}\r\n~~~\r\n\r\nYour output should now look like:\r\n\r\n![Drawing spot with second colour method](./img/03.png)\r\n\r\nCan you answer why this is producing the same output as the previous version? \r\n\r\nSave your work (don't close the project though).\r\n\r\n\r\n##Spot 5.3 - Adding another constructor (to introduce an r,g,b starting colour)\r\n\r\nSave your **Spot_Version5_2** work as **Spot_Version5_3**.\r\n\r\nType in the following extra method code in your Spot class:\r\n\r\n~~~java\r\n Spot(float xPos, float yPos, float diamtr, int redVal, int greenVal, int blueVal)\r\n   {\r\n     xCoord = xPos;\r\n     yCoord = yPos;\r\n     diameter = diamtr;\r\n     colour(redVal, greenVal, blueVal);  \r\n   }\r\n~~~\r\n\r\nThen refactor your setup method in the *main* tab like so:\r\n\r\n~~~java\r\nvoid setup()\r\n{\r\n  size (100,100);\r\n  noStroke();\r\n  sp = new Spot(33, 50, 30, 255,150,50);\r\n}\r\n~~~\r\n\r\nRun the code.  \r\n\r\nYou should see the a differently coloured spot. \r\n\r\n![Drawing spot using rgb constructor](./img/04.png)\r\n\r\nChange the rgb values in the constructor and see how this changes the colour in the spot. \r\n\r\nAlso use the colour method in the draw() method to change the colour. Will this work? Is this the best use of the constructor?\r\n\r\nNote that now, your Spot class should look like: \r\n\r\n~~~java\r\nclass Spot{\r\n  float xCoord, yCoord;\r\n  float diameter;\r\n  int red, green, blue, gray;\r\n  \r\n  Spot()\r\n  {\r\n  }\r\n  \r\n  Spot(float xPos, float yPos, float diamtr)\r\n  {\r\n     xCoord = xPos;\r\n     yCoord = yPos;\r\n     diameter = diamtr;\r\n   }\r\n  \r\n   Spot(float xPos, float yPos, float diamtr, int grayVal)\r\n   {\r\n     xCoord = xPos;\r\n     yCoord = yPos;\r\n     diameter = diamtr;\r\n     colour(grayVal);\r\n   }\r\n\r\n   Spot(float xPos, float yPos, float diamtr, int redVal, int greenVal, int blueVal)\r\n   {\r\n     xCoord = xPos;\r\n     yCoord = yPos;\r\n     diameter = diamtr;\r\n     colour(redVal, greenVal, blueVal);  \r\n   }\r\n   \r\n   void display()\r\n   {\r\n     ellipse(xCoord, yCoord, diameter, diameter);\r\n   } \r\n  \r\n   void colour(int redVal, int greenVal, int blueVal)\r\n   {\r\n     red = redVal;\r\n     green = greenVal;\r\n     blue = blueVal;\r\n     fill (red, green, blue);\r\n   }\r\n\r\n   void colour(int grayVal)\r\n   {\r\n     gray = grayVal;\r\n     fill (gray);\r\n   }\r\n}\r\n~~~\r\n\r\nSave your work (don't close the project though).\r\n\r\n"
    },
  
    {
    "title": "#Spot V6.x",
    "shortTitle": "03",
    "contentMd" : "#Spot V6.x\r\n\r\nIn this step, we will introduce the *move* method and also start using the *this* keyword.\r\n\r\n**Note:**  The version of Spot below doesn't enforce the encapsulation rules yet.  We will implement these rules in SpotV7.0 (consistent with how we did it in lectures).  We will bring in Encapsulation in Step04 of this lab when we add the accessors and mutators.\r\n\r\n\r\n##Spot V6.0 - Adding a move() method\r\n\r\nSave your **Spot_Version5_3** work as **Spot_Version6_0**.\r\n\r\nType in the following extra method code in your Spot class:\r\n\r\n~~~java\r\n   void move(float xPos, float yPos)\r\n   {\r\n     xCoord = xPos;\r\n     yCoord = yPos;\r\n   }\r\n~~~\r\n\r\nand then in the *main* tab, refactor the draw() method to: \r\n\r\n~~~java\r\nSpot sp;\r\n\r\nvoid setup()\r\n{\r\n  size (100,100);\r\n  noStroke();\r\n  sp = new Spot(33, 50, 30, 125);\r\n}\r\n\r\nvoid draw()\r\n{\r\n  background(0);\r\n  sp.display();\r\n  sp.move(mouseX, mouseY);\r\n}\r\n~~~\r\n\r\nRun the code. \r\n\r\nWhat do you see? Do you understand why it looks like this? If you do not understand, ask your lecturer.\r\n\r\nSave your work (don't close the project though).\r\n\r\n\r\n##Spot V6.1 - the this keyword\r\n\r\nSave your **Spot_Version6_0** work as **Spot_Version6_1**.\r\n\r\nRefactor your Spot class to use the *this* keyword:\r\n\r\n~~~java\r\nclass Spot{\r\n  \r\n  float xCoord, yCoord;\r\n  float diameter;\r\n  int red, green, blue, gray;\r\n  \r\n  Spot()\r\n  {\r\n  }\r\n  \r\n Spot(float xCoord, float yCoord, float diameter)\r\n {\r\n    this.xCoord = xCoord;\r\n    this.yCoord = yCoord;\r\n    this.diameter = diameter;\r\n  }\r\n  \r\n   Spot(float xCoord, float yCoord, float diameter, int gray)\r\n   {\r\n    this.xCoord = xCoord;\r\n    this.yCoord = yCoord;\r\n    this.diameter = diameter;\r\n    colour(gray);\r\n   }\r\n\r\n   Spot(float xCoord, float yCoord, float diameter, int red, int green, int blue)\r\n   {\r\n    this.xCoord = xCoord;\r\n    this.yCoord = yCoord;\r\n    this.diameter = diameter;\r\n     colour(red, green, blue);  \r\n   }\r\n   \r\n   void display()\r\n   {\r\n     ellipse(xCoord, yCoord, diameter, diameter);\r\n   } \r\n  \r\n  void colour(int red, int green, int blue)\r\n  {\r\n    this.red = red;\r\n    this.green = green;\r\n    this.blue = blue;\r\n    fill (this.red, this.green, this.blue);\r\n  }\r\n\r\n  void colour(int gray){\r\n    this.gray = gray;\r\n    fill (this.gray);\r\n  }\r\n   \r\n   void move(float xCoord, float yCoord)\r\n   {\r\n     this.xCoord = xCoord;\r\n     this.yCoord = yCoord;\r\n   }\r\n}\r\n~~~\r\n\r\nNo other changes are necessary.\r\n\r\nRun your code.  It should behave in the same way at V6.0 above.\r\n\r\nSave your work (don't close the project though).\r\n\r\n"
    },
  
    {
    "title": "#Setters and Getters",
    "shortTitle": "04",
    "contentMd" : "#Setters and Getters\r\n\r\nIn this step, we will make the fields in Spot private and then introduce the *setter* and *getter* methods.  This will allow us implement the encapsulation rules in our class.  \r\n\r\n\r\n##Spot V7.0\r\n\r\nSave your **Spot_Version6_1** work as **Spot_Version7_0**.\r\n\r\nRefactor your Spot class so that the fields have private access and it has the following setter and getter methods:\r\n\r\n~~~java\r\nclass Spot {\r\n\r\n  private float xCoord, yCoord;\r\n  private float diameter;\r\n  private int red, green, blue, gray;\r\n\r\n  //------------------//\r\n  //   constructors   //\r\n  //------------------//\r\n\r\n  Spot()\r\n  {\r\n  }\r\n\r\n  Spot(float xCoord, float yCoord, float diameter)\r\n  {\r\n    this.xCoord = xCoord;\r\n    this.yCoord = yCoord;\r\n    this.diameter = diameter;\r\n  }\r\n\r\n  Spot(float xCoord, float yCoord, float diameter, int gray)\r\n  {\r\n    this.xCoord = xCoord;\r\n    this.yCoord = yCoord;\r\n    this.diameter = diameter;\r\n    colour(gray);\r\n  }\r\n\r\n  Spot(float xCoord, float yCoord, float diameter, int red, int green, int blue)\r\n  {\r\n    this.xCoord = xCoord;\r\n    this.yCoord = yCoord;\r\n    this.diameter = diameter;\r\n    colour(red, green, blue);\r\n  }\r\n\r\n  //------------------//\r\n  //     methods      //\r\n  //------------------//\r\n\r\n  void display()\r\n  {\r\n    ellipse(xCoord, yCoord, diameter, diameter);\r\n  } \r\n\r\n  void colour(int red, int green, int blue)\r\n  {\r\n    this.red = red;\r\n    this.green = green;\r\n    this.blue = blue;\r\n    fill (this.red, this.green, this.blue);\r\n  }\r\n\r\n  void colour(int gray) {\r\n    this.gray = gray;\r\n    fill (this.gray);\r\n  }\r\n\r\n  void move(float xCoord, float yCoord)\r\n  {\r\n    this.xCoord = xCoord;\r\n    this.yCoord = yCoord;\r\n  }\r\n\r\n  //------------------//\r\n  //     getters      //\r\n  //------------------//\r\n  public float getDiameter() {\r\n    return diameter;\r\n  }\r\n\r\n  public float getXCoord() {\r\n    return xCoord;\r\n  }\r\n\r\n  public float getYCoord() {\r\n    return yCoord;\r\n  }\r\n\r\n  public int getRed() {\r\n    return red;\r\n  }\r\n\r\n  public int getGreen() {\r\n    return green;\r\n  }\r\n\r\n  public int getBlue() {\r\n    return blue;\r\n  }\r\n\r\n  public int getGray() {\r\n    return gray;\r\n  }\r\n\r\n  //------------------//\r\n  //     setters      //\r\n  //------------------//\r\n  public void setDiameter(float diameter) {\r\n    this.diameter = diameter;\r\n  } \r\n\r\n  public void setXCoord(float xCoord) {\r\n    this.xCoord = xCoord;\r\n  } \r\n\r\n  public void setYCoord(float yCoord) {\r\n    this.yCoord = yCoord;\r\n  } \r\n\r\n  public void setRed(int red) {\r\n    this.red = red;\r\n  } \r\n\r\n  public void setGreen(int green) {\r\n    this.green = green;\r\n  } \r\n\r\n  public void setBlue(int blue) {\r\n    this.blue = blue;\r\n  }\r\n\r\n  public void setGray(int gray) {\r\n    this.gray = gray;\r\n  }\r\n\r\n}\r\n~~~\r\n\r\nand then in the *main* tab, refactor the draw() method to: \r\n\r\n~~~java\r\nSpot sp;\r\n\r\nvoid setup()\r\n{\r\n  size (100,100);\r\n  noStroke();\r\n\r\n  sp = new Spot(33, 50, 30);\r\n  println(\"After constructor, the value of the diameter is \" + sp.getDiameter());\r\n\r\n  // Now change the value of the diameter\r\n  sp.setDiameter(40);\r\n  println(\"After setter, the value of the diameter is \" + sp.getDiameter());\r\n}\r\n\r\nvoid draw()\r\n{\r\n  background(0);\r\n  sp.colour(255,0,0);\r\n  sp.display();\r\n}\r\n~~~\r\n\r\n\r\nExamine the Spot code i.e. the getters and setters. Note what each of the methods do, their naming convention and return values etc.\r\n\r\nRun this code.  \r\n\r\nYour console output should be:\r\n\r\n~~~\r\nAfter constructor, the value of the diameter is 30.0\r\nAfter setter, the value of the diameter is 40.0\r\n~~~\r\n\r\nHave a look at your code.  Are you happy that you understand how this output was produced? \r\n\r\nSave your work (don't close the project though).\r\n\r\n\r\n"
    },
  
    {
    "title": "#Setters and Getters - validations",
    "shortTitle": "05",
    "contentMd" : "#Setters and Getters - validations\r\n\r\nIn this step, we will add some validation to our diameter field.\r\n\r\n\r\n##Spot V7.1 - Using validation in **constructors**\r\n \r\nSave your **Spot_Version7_0** work as **Spot_Version7_1**.\r\n\r\nRefactor the following Spot Constructor so that it validates the diameter field.\r\n\r\n~~~java \r\nSpot(float xCoord, float yCoord, float diameter)\r\n  {\r\n    this.xCoord = xCoord;\r\n    this.yCoord = yCoord;\r\n    if ((diameter >= 20) && (diameter <= 50)){\r\n       this.diameter = diameter;\r\n    }\r\n    else{\r\n       this.diameter = 20;\r\n    } \r\n  }\r\n~~~\r\n\r\nThis code will only allow values of between (and including) 20 and 50 into the diameter field. If values outside this range are sent in via the parameter, then the value of 20 is assigned to the diameter field (using the else clause).\r\n\r\nTo see this validation in action, refactor the setup method in the *main* tab to:\r\n\r\n~~~java\r\nSpot sp;\r\n\r\nvoid setup()\r\n{\r\n  size (100,100);\r\n  noStroke();\r\n  \r\n  //constructor (float, float, float) test\r\n  sp = new Spot(33, 50, 30000);\r\n  println(\"The value of diameter is : \"+ sp.getDiameter());\r\n\r\n}\r\n\r\nvoid draw()\r\n{\r\n  background(0);\r\n  sp.display();\r\n  sp.move(mouseX,  mouseY);\r\n}\r\n~~~\r\n\r\nTry to run the code. You should see the following line in the console screen:\r\n\r\n![Value of diameter field](./img/05.png)\r\n\r\n\r\n##Data Integrity\r\n\r\nWe have diameter validation in one constructor, but we can see that the diameter is updated in other constructors:\r\n\r\n~~~java \r\n  //------------------//\r\n  //   constructors   //\r\n  //------------------//\r\n\r\n  Spot()\r\n  {\r\n  }\r\n\r\n  Spot(float xCoord, float yCoord, float diameter)\r\n  {\r\n    this.xCoord = xCoord;\r\n    this.yCoord = yCoord;\r\n    if ((diameter >= 20) && (diameter <= 50)) {\r\n      this.diameter = diameter;\r\n    } else {\r\n      this.diameter = 20;\r\n    }\r\n  }\r\n\r\n  Spot(float xCoord, float yCoord, float diameter, int gray)\r\n  {\r\n    this.xCoord = xCoord;\r\n    this.yCoord = yCoord;\r\n    this.diameter = diameter;\r\n    colour(gray);\r\n  }\r\n\r\n  Spot(float xCoord, float yCoord, float diameter, int red, int green, int blue)\r\n  {\r\n    this.xCoord = xCoord;\r\n    this.yCoord = yCoord;\r\n    this.diameter = diameter;\r\n    colour(red, green, blue);\r\n  }\r\n\r\n~~~\r\n\r\nIt is also updated in the mutator.  \r\n\r\n~~~java\r\n  public void setDiameter(float diameter) {\r\n    this.diameter = diameter;\r\n  } \r\n~~~\r\n\r\nWe have compromised our *data integrity*...diameter may or may not be between the right boundaries, depending on which constructor/mutator we call.  We have to fix this!\r\n\r\nCopy and paste the constructor diameter validation into all constructors that update diameter:\r\n\r\n~~~java\r\n  Spot(float xCoord, float yCoord, float diameter)\r\n  {\r\n    this.xCoord = xCoord;\r\n    this.yCoord = yCoord;\r\n    if ((diameter >= 20) && (diameter <= 50)) {\r\n      this.diameter = diameter;\r\n    } else {\r\n      this.diameter = 20;\r\n    }\r\n  }\r\n\r\n  Spot(float xCoord, float yCoord, float diameter, int gray)\r\n  {\r\n    this.xCoord = xCoord;\r\n    this.yCoord = yCoord;\r\n    if ((diameter >= 20) && (diameter <= 50)) {\r\n      this.diameter = diameter;\r\n    } else {\r\n      this.diameter = 20;\r\n    }\r\n    colour(gray);\r\n  }\r\n\r\n  Spot(float xCoord, float yCoord, float diameter, int red, int green, int blue)\r\n  {\r\n    this.xCoord = xCoord;\r\n    this.yCoord = yCoord;\r\n    if ((diameter >= 20) && (diameter <= 50)) {\r\n      this.diameter = diameter;\r\n    } else {\r\n      this.diameter = 20;\r\n    }\r\n    colour(red, green, blue);\r\n  }\r\n~~~\r\n\r\nPaste the constructor diameter validation into the diameter mutator and remove the *else* clause:\r\n\r\n~~~java\r\n  public void setDiameter(float diameter) {\r\n   if ((diameter >= 20) && (diameter <= 50)) {\r\n      this.diameter = diameter;\r\n    }\r\n  } \r\n~~~\r\n\r\nA note on setters:  \r\n\r\n- We use setters as the *safe* way to change the values of fields after the object has been created.\r\n- We typically use the same validation rules that we applied in the constructor...except...there typically is ***no*** else in the if statement. This means that if the parameter is not in the correct range, then the diameter field will remain unchanged. Where feasible, this is the convention we use for this module. \r\n\r\n\r\n##Testing the grayscale constructor and the mutator\r\n\r\nTo test your grayscale constructor and the mutator code, refactor your setup method in the *main* tab to:\r\n\r\n~~~java\r\nvoid setup()\r\n{\r\n  size (100, 100);\r\n  noStroke();\r\n  \r\n  //grayscale constructor test\r\n  sp = new Spot(33, 50, 30000, 200);\r\n  println(\"After grayscale constructor, the value of the diameter is \" + sp.getDiameter());\r\n  sp.setDiameter(40000);    // changing the value of the diameter\r\n  println(\"After setter, the value of the diameter is \" + sp.getDiameter());\r\n\r\n}\r\n~~~\r\n\r\nRun your code.  The console output should be:\r\n\r\n~~~\r\nAfter grayscale constructor, the value of the diameter is 20.0\r\nAfter setter, the value of the diameter is 20.0\r\n~~~\r\n\r\n\r\n##Testing the rgb constructor and the mutator\r\n\r\nTo test your rgb constructor and the mutator code, refactor your setup method in the *main* tab to:\r\n\r\n~~~java\r\nvoid setup()\r\n{\r\n  size (100, 100);\r\n  noStroke();\r\n\r\n  //rgb constructor test\r\n  sp = new Spot(33, 50, 30000, 200, 0, 0);\r\n  println(\"After rgb constructor, the value of the diameter is \" + sp.getDiameter());\r\n  sp.setDiameter(40000);    // changing the value of the diameter\r\n  println(\"After setter, the value of the diameter is \" + sp.getDiameter());\r\n\r\n}\r\n~~~\r\n\r\nRun your code.  The console output should be:\r\n\r\n~~~\r\nAfter rgb constructor, the value of the diameter is 20.0\r\nAfter setter, the value of the diameter is 20.0\r\n~~~\r\n\r\nSave your work and close the project.\r\n\r\n\r\n##Repeating code...\r\n\r\nYou may have noticed that we have repeated the same validation in many places in the above code.  This is not the best approach at all.  What would happen if we decided to change the diameter boundaries of the Spot from 20:50 to 20:100?  You would have to *remember* to change it in four places.  That's a lot of remembering and this is where bugs sneak in...what if we forgot to change one of the checks?   \r\n\r\nA key mantra to remember when coding...use the **DRY** approach...**Don't Repeat Yourself**.  However, we have a bit of work to do before we move down this path.  Later in the module, we will show a different approach to avoid this scenario and adhere to DRY principles.   \r\n\r\n"
    },
  
    {
    "title": "#Exercise",
    "shortTitle": "Exercise",
    "contentMd" : "#Exercise\r\n\r\n\r\n##Exercise 1 \r\n\r\nUsing [Spot Version 7.1](archives/Spot_Version7_1.zip) as a starting point, save this as **lab08_exercise_01**.\r\n\r\nImplement these validation rules in the relevant constructors and setters:\r\n\r\n- xCoord and yCoord values must be in the range 0..100.\r\n- if an invalid value is supplied at constructor level, give a default of 50.\r\n- if an invalid value is supplied at setter level, don't default.\r\n\r\nFor testing, use the same appraoch we applied to testing the diameter validation.\r\n\r\n\r\n##DRY principle\r\n\r\nNow you can really see how we have repeated ourselves throughout our code.  As we become more familiar with Java, we will working on writing utility / helper methods to reduce this repetition!  \r\n\r\n\r\n"
    },
  
    {
    "title": "#Challenge",
    "shortTitle": "Challenge",
    "contentMd" : "#Challenge\r\n\r\n##Challenge 1 \r\n\r\nUsing your latest working version of the Spot project as a starting point [or our solution to the previous exercise](archives/lab08_exercise_01.zip), save it as **lab08_challenge_01**.\r\n\r\nIn Spot, write a method called **grow** that takes in one float parameter (growthPixels).  The return type of this method is void.  \r\n\r\nIn the *main* tab, in the draw method, call the **grow** method, passing out a value as a parameter.\r\n\r\nRun your code.  If you passed a positive number in grow, you should see your circle growing each time the draw() method is called, if you passed a negative value, you should see your circle shrinking.  To verfiy that the diameter is changing, you could print out the value stored in it (using getDiameter).\r\n\r\nData Integrity:  Did you consider data integrity when writing the draw method?  What we mean by this is...else where in the Spot class, we restricted the diameter to a range of 20 to 50 inclusive.  Did you remember to do this in the new method, *grow*?  If not, refactor your method to make sure that the diameter doesn't breach these bounds.  \r\n\r\n\r\n"
    },
  
    {
    "title": "#Solutions",
    "shortTitle": "Solutions",
    "contentMd" : "#Solutions\r\n\r\nThe solutions for this lab can be found [here](archives/lab08_solutions.zip). \r\n\r\nIf you require unzipping software, 7zip is a good choice: <http://www.7-zip.org/> (or Keka for Mac <http://www.kekaosx.com/en/>)\r\n\r\nAfter unzipping the solutions, it might be a good idea to copy the folders to your **sketchbook** folder.  From Processing, you could then use **File**, followed by **Sketchbook** to easily open them.\r\n"
    }
  
  ]
  }

